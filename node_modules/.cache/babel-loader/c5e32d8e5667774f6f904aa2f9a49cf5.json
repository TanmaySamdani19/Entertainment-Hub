{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanma\\\\Desktop\\\\netflix-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport axios from './axios';\nimport React, { useEffect, useState } from 'react';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow = false\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const base_url = 'https://image.tmdb.org/t/p/original';\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: '390',\n    width: '640',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => (isLargeRow && movie.poster_path || !isLargeRow && movie.backdrop_path) && /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"zcdNe0Lr8rip4Oj/qSSLGY8Tl3o=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/tanma/Desktop/netflix-clone/src/Row.js"],"names":["axios","React","useEffect","useState","YouTube","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","base_url","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","map","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;;;AAEA,SAASC,GAAT,OAAsD;AAAA;;AAAA,MAAzC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,UAAU,GAAG;AAAhC,GAAyC;AACpD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAMU,QAAQ,GAAG,qCAAjB;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeY,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAUT,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACK,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACP,QAAD,CAPM,CAAT;AASA,QAAMY,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,KAFI;AAGXC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHD,GAAb;;AASA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAId,UAAJ,EAAgB;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH;AACJ,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKN;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACGG,MAAM,CAACiB,GAAP,CAAWD,KAAK,IACf,CAAEjB,UAAU,IAAIiB,KAAK,CAACE,WAArB,IACE,CAACnB,UAAD,IAAeiB,KAAK,CAACG,aADxB,kBAEE;AAEE,QAAA,OAAO,EAAE,MAAMJ,WAAW,CAACC,KAAD,CAF5B;AAGE,QAAA,SAAS,EAAG,eAAcjB,UAAU,IAAI,kBAAmB,EAH7D;AAIE,QAAA,GAAG,EAAG,GAAEK,QAAS,GAAEL,UAAU,GAAGiB,KAAK,CAACE,WAAT,GAAuBF,KAAK,CAACG,aAAc,EAJ1E;AAKE,QAAA,GAAG,EAAEH,KAAK,CAACI;AALb,SACOJ,KAAK,CAACK,EADb;AAAA;AAAA;AAAA;AAAA,cAHH;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,EAgBGnB,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEQ;AAApC;AAAA;AAAA;AAAA;AAAA,YAhBjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GAlDQd,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import axios from './axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport './Row.css'\r\nimport YouTube from 'react-youtube'\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\r\n  const [movies, setMovies] = useState([])\r\n  const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n  const base_url = 'https://image.tmdb.org/t/p/original'\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl)\r\n      setMovies(request.data.results)\r\n      return request\r\n    }\r\n    fetchData()\r\n  }, [fetchUrl])\r\n\r\n  const opts = {\r\n    height: '390',\r\n    width: '640',\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  }\r\n\r\n  const handleClick = (movie) => {\r\n      if (trailerUrl) {\r\n          setTrailerUrl('');\r\n      }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map(movie => (\r\n          ((isLargeRow && movie.poster_path) ||\r\n            (!isLargeRow && movie.backdrop_path)) && (\r\n            < img\r\n              key={movie.id}\r\n              onClick={() => handleClick(movie)}\r\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n              src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n              alt={movie.name} \r\n            />\r\n          )\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Row"]},"metadata":{},"sourceType":"module"}