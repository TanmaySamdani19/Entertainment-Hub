{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanma\\\\Desktop\\\\netflix-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport axios from './axios';\nimport React, { useEffect, useState } from 'react';\nimport './Row.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow = false\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const base_url = 'https://image.tmdb.org/t/p/original';\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => (isLargeRow && movie.poster_path || !isLargeRow && movie.backdrop_path) && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/tanma/Desktop/netflix-clone/src/Row.js"],"names":["axios","React","useEffect","useState","Row","title","fetchUrl","isLargeRow","movies","setMovies","base_url","fetchData","request","get","data","results","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,OAAsD;AAAA;;AAAA,MAAzC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,UAAU,GAAG;AAAhC,GAAyC;AAClD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMO,QAAQ,GAAG,qCAAjB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeS,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUP,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACG,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACL,QAAD,CAPM,CAAT;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACGG,MAAM,CAACQ,GAAP,CAAWC,KAAK,IACf,CAAEV,UAAU,IAAIU,KAAK,CAACC,WAArB,IACE,CAACX,UAAD,IAAeU,KAAK,CAACE,aADxB,kBAEE;AAEE,QAAA,SAAS,EAAG,eAAcZ,UAAU,IAAI,kBAAmB,EAF7D;AAGE,QAAA,GAAG,EAAG,GAAEG,QAAS,GAAEH,UAAU,GAAGU,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aAAc,EAH1E;AAIE,QAAA,GAAG,EAAEF,KAAK,CAACG;AAJb,SACOH,KAAK,CAACI,EADb;AAAA;AAAA;AAAA;AAAA,cAHH;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAhCMjB,G;;KAAAA,G;AAkCT,eAAeA,GAAf","sourcesContent":["import axios from './axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport './Row.css'\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\r\n    const [movies, setMovies] = useState([])\r\n  \r\n    const base_url = 'https://image.tmdb.org/t/p/original'\r\n  \r\n    useEffect(() => {\r\n      async function fetchData() {\r\n        const request = await axios.get(fetchUrl)\r\n        setMovies(request.data.results)\r\n        return request\r\n      }\r\n      fetchData()\r\n    }, [fetchUrl])\r\n  \r\n  \r\n    return (\r\n      <div className=\"row\">\r\n        <h2>{title}</h2>\r\n        <div className=\"row__posters\">\r\n          {movies.map(movie => (\r\n            ((isLargeRow && movie.poster_path) ||\r\n              (!isLargeRow && movie.backdrop_path)) && (\r\n              < img\r\n                key={movie.id}\r\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                alt={movie.name} />\r\n            )\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}